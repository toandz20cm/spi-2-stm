
spii-slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000036c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000534  08000534  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000534  08000534  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000534  08000534  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000534  08000534  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000534  08000534  00001534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000538  08000538  00001538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800053c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000540  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000540  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001345  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000572  00000000  00000000  00003379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  000038f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000168  00000000  00000000  00003ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011e82  00000000  00000000  00003c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021e0  00000000  00000000  00015aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006fd2d  00000000  00000000  00017caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000879d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f8  00000000  00000000  00087a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00088014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800051c 	.word	0x0800051c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	0800051c 	.word	0x0800051c

08000208 <main>:
void USART2_Init(void);
void USART2_SendChar(char c);
void USART2_SendString(char *str);
uint8_t SPI1_ReceiveData(void);

int main(void) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b09c      	sub	sp, #112	@ 0x70
 800020c:	af00      	add	r7, sp, #0
    GPIO_Init();
 800020e:	f000 f829 	bl	8000264 <GPIO_Init>
    SPI1_Slave_Init();
 8000212:	f000 f85f 	bl	80002d4 <SPI1_Slave_Init>
    USART2_Init();
 8000216:	f000 f875 	bl	8000304 <USART2_Init>

    while (1) {
        char data[100];      // Mảng lưu chuỗi nhận được
        int i = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	66fb      	str	r3, [r7, #108]	@ 0x6c

        // Nhận dữ liệu từ Master cho đến khi gặp ký tự '\0' (kết thúc chuỗi)
        while (1) {
            uint8_t received_byte = SPI1_ReceiveData();  // Nhận dữ liệu từ SPI
 800021e:	f000 f8c5 	bl	80003ac <SPI1_ReceiveData>
 8000222:	4603      	mov	r3, r0
 8000224:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            if (received_byte == '\0') {
 8000228:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800022c:	2b00      	cmp	r3, #0
 800022e:	d00c      	beq.n	800024a <main+0x42>
                break;  // Dừng khi nhận được ký tự kết thúc chuỗi
            }
            data[i++] = received_byte;  // Lưu ký tự vào mảng
 8000230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000232:	1c5a      	adds	r2, r3, #1
 8000234:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000236:	3370      	adds	r3, #112	@ 0x70
 8000238:	443b      	add	r3, r7
 800023a:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800023e:	f803 2c6c 	strb.w	r2, [r3, #-108]
            if (i >= sizeof(data) - 1) {  // Đảm bảo không tràn mảng
 8000242:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000244:	2b62      	cmp	r3, #98	@ 0x62
 8000246:	d802      	bhi.n	800024e <main+0x46>
        while (1) {
 8000248:	e7e9      	b.n	800021e <main+0x16>
                break;  // Dừng khi nhận được ký tự kết thúc chuỗi
 800024a:	bf00      	nop
 800024c:	e000      	b.n	8000250 <main+0x48>
                break;
 800024e:	bf00      	nop
            }
        }

        // Null-terminate the string
        data[i] = '\0';
 8000250:	1d3a      	adds	r2, r7, #4
 8000252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000254:	4413      	add	r3, r2
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]

        // Gửi chuỗi qua UART
        USART2_SendString(data);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f88f 	bl	8000380 <USART2_SendString>
    while (1) {
 8000262:	e7da      	b.n	800021a <main+0x12>

08000264 <GPIO_Init>:
    }
}

/* ==== Cấu hình GPIO ==== */
void GPIO_Init(void) {
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // Bật clock GPIOA
 8000268:	4b18      	ldr	r3, [pc, #96]	@ (80002cc <GPIO_Init+0x68>)
 800026a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800026c:	4a17      	ldr	r2, [pc, #92]	@ (80002cc <GPIO_Init+0x68>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6313      	str	r3, [r2, #48]	@ 0x30

    // PA4 - NSS (Alternate Function)
    GPIOA->MODER |= (2 << (4 * 2));
 8000274:	4b16      	ldr	r3, [pc, #88]	@ (80002d0 <GPIO_Init+0x6c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a15      	ldr	r2, [pc, #84]	@ (80002d0 <GPIO_Init+0x6c>)
 800027a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800027e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (5 << (4 * 4));
 8000280:	4b13      	ldr	r3, [pc, #76]	@ (80002d0 <GPIO_Init+0x6c>)
 8000282:	6a1b      	ldr	r3, [r3, #32]
 8000284:	4a12      	ldr	r2, [pc, #72]	@ (80002d0 <GPIO_Init+0x6c>)
 8000286:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800028a:	6213      	str	r3, [r2, #32]

    // PA5, PA6, PA7 - SPI1 (Alternate Function 5)
    GPIOA->MODER |= (2 << (5 * 2)) | (2 << (6 * 2)) | (2 << (7 * 2));
 800028c:	4b10      	ldr	r3, [pc, #64]	@ (80002d0 <GPIO_Init+0x6c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0f      	ldr	r2, [pc, #60]	@ (80002d0 <GPIO_Init+0x6c>)
 8000292:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000296:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (5 << (5 * 4)) | (5 << (6 * 4)) | (5 << (7 * 4));
 8000298:	4b0d      	ldr	r3, [pc, #52]	@ (80002d0 <GPIO_Init+0x6c>)
 800029a:	6a1b      	ldr	r3, [r3, #32]
 800029c:	4a0c      	ldr	r2, [pc, #48]	@ (80002d0 <GPIO_Init+0x6c>)
 800029e:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80002a2:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80002a6:	6213      	str	r3, [r2, #32]

    // PA2 - TX cho USART2 (chỉ cần cấu hình chân này cho UART)
    GPIOA->MODER |= (2 << (2 * 2));         // PA2 (TX) là Alternate Function
 80002a8:	4b09      	ldr	r3, [pc, #36]	@ (80002d0 <GPIO_Init+0x6c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a08      	ldr	r2, [pc, #32]	@ (80002d0 <GPIO_Init+0x6c>)
 80002ae:	f043 0320 	orr.w	r3, r3, #32
 80002b2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7 << (2 * 4));        // PA2 (TX) kết nối USART2_AF7
 80002b4:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <GPIO_Init+0x6c>)
 80002b6:	6a1b      	ldr	r3, [r3, #32]
 80002b8:	4a05      	ldr	r2, [pc, #20]	@ (80002d0 <GPIO_Init+0x6c>)
 80002ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80002be:	6213      	str	r3, [r2, #32]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40020000 	.word	0x40020000

080002d4 <SPI1_Slave_Init>:

/* ==== Cấu hình SPI1 ở chế độ Slave ==== */
void SPI1_Slave_Init(void) {
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN; // Bật clock SPI1
 80002d8:	4b08      	ldr	r3, [pc, #32]	@ (80002fc <SPI1_Slave_Init+0x28>)
 80002da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002dc:	4a07      	ldr	r2, [pc, #28]	@ (80002fc <SPI1_Slave_Init+0x28>)
 80002de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002e2:	6453      	str	r3, [r2, #68]	@ 0x44

    SPI1->CR1 |= SPI_CR1_SPE;   // Bật SPI ở chế độ Slave
 80002e4:	4b06      	ldr	r3, [pc, #24]	@ (8000300 <SPI1_Slave_Init+0x2c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a05      	ldr	r2, [pc, #20]	@ (8000300 <SPI1_Slave_Init+0x2c>)
 80002ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002ee:	6013      	str	r3, [r2, #0]
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40023800 	.word	0x40023800
 8000300:	40013000 	.word	0x40013000

08000304 <USART2_Init>:

/* ==== Cấu hình USART2 để gửi dữ liệu lên Serial Monitor ==== */
void USART2_Init(void) {
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;   // Bật clock GPIOA
 8000308:	4b0f      	ldr	r3, [pc, #60]	@ (8000348 <USART2_Init+0x44>)
 800030a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030c:	4a0e      	ldr	r2, [pc, #56]	@ (8000348 <USART2_Init+0x44>)
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;  // Bật clock USART2
 8000314:	4b0c      	ldr	r3, [pc, #48]	@ (8000348 <USART2_Init+0x44>)
 8000316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000318:	4a0b      	ldr	r2, [pc, #44]	@ (8000348 <USART2_Init+0x44>)
 800031a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800031e:	6413      	str	r3, [r2, #64]	@ 0x40

    // Cấu hình Baud Rate = 115200, 8N1
    USART2->BRR = 16000000 / 115200;        // Tốc độ baud = 115200
 8000320:	4b0a      	ldr	r3, [pc, #40]	@ (800034c <USART2_Init+0x48>)
 8000322:	228a      	movs	r2, #138	@ 0x8a
 8000324:	609a      	str	r2, [r3, #8]
    USART2->CR1 |= USART_CR1_TE;            // Bật truyền (Transmitter)
 8000326:	4b09      	ldr	r3, [pc, #36]	@ (800034c <USART2_Init+0x48>)
 8000328:	68db      	ldr	r3, [r3, #12]
 800032a:	4a08      	ldr	r2, [pc, #32]	@ (800034c <USART2_Init+0x48>)
 800032c:	f043 0308 	orr.w	r3, r3, #8
 8000330:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= USART_CR1_UE;            // Bật USART
 8000332:	4b06      	ldr	r3, [pc, #24]	@ (800034c <USART2_Init+0x48>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	4a05      	ldr	r2, [pc, #20]	@ (800034c <USART2_Init+0x48>)
 8000338:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800033c:	60d3      	str	r3, [r2, #12]
}
 800033e:	bf00      	nop
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	40023800 	.word	0x40023800
 800034c:	40004400 	.word	0x40004400

08000350 <USART2_SendChar>:

/* ==== Gửi một ký tự qua UART2 ==== */
void USART2_SendChar(char c) {
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE));  // Đợi bộ đệm TX trống
 800035a:	bf00      	nop
 800035c:	4b07      	ldr	r3, [pc, #28]	@ (800037c <USART2_SendChar+0x2c>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000364:	2b00      	cmp	r3, #0
 8000366:	d0f9      	beq.n	800035c <USART2_SendChar+0xc>
    USART2->DR = c;                        // Gửi ký tự
 8000368:	4a04      	ldr	r2, [pc, #16]	@ (800037c <USART2_SendChar+0x2c>)
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	6053      	str	r3, [r2, #4]
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40004400 	.word	0x40004400

08000380 <USART2_SendString>:

/* ==== Gửi chuỗi qua UART2 ==== */
void USART2_SendString(char *str) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000388:	e007      	b.n	800039a <USART2_SendString+0x1a>
        USART2_SendChar(*str);  // Gửi từng ký tự trong chuỗi
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ffde 	bl	8000350 <USART2_SendChar>
        str++;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	3301      	adds	r3, #1
 8000398:	607b      	str	r3, [r7, #4]
    while (*str) {
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d1f3      	bne.n	800038a <USART2_SendString+0xa>
    }
}
 80003a2:	bf00      	nop
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <SPI1_ReceiveData>:

/* ==== Nhận dữ liệu từ SPI1 ==== */
uint8_t SPI1_ReceiveData(void) {
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
    while (!(SPI1->SR & SPI_SR_RXNE));  // Đợi dữ liệu vào bộ đệm
 80003b0:	bf00      	nop
 80003b2:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <SPI1_ReceiveData+0x24>)
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d0f9      	beq.n	80003b2 <SPI1_ReceiveData+0x6>
    return SPI1->DR;                     // Lấy dữ liệu ra
 80003be:	4b04      	ldr	r3, [pc, #16]	@ (80003d0 <SPI1_ReceiveData+0x24>)
 80003c0:	68db      	ldr	r3, [r3, #12]
 80003c2:	b2db      	uxtb	r3, r3
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	40013000 	.word	0x40013000

080003d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <NMI_Handler+0x4>

080003dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003e0:	bf00      	nop
 80003e2:	e7fd      	b.n	80003e0 <HardFault_Handler+0x4>

080003e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <MemManage_Handler+0x4>

080003ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <BusFault_Handler+0x4>

080003f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <UsageFault_Handler+0x4>

080003fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr

0800040a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800042a:	f000 f83f 	bl	80004ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <SystemInit+0x20>)
 800043a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800043e:	4a05      	ldr	r2, [pc, #20]	@ (8000454 <SystemInit+0x20>)
 8000440:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000444:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	e000ed00 	.word	0xe000ed00

08000458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000458:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000490 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800045c:	f7ff ffea 	bl	8000434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000460:	480c      	ldr	r0, [pc, #48]	@ (8000494 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000462:	490d      	ldr	r1, [pc, #52]	@ (8000498 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000464:	4a0d      	ldr	r2, [pc, #52]	@ (800049c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000468:	e002      	b.n	8000470 <LoopCopyDataInit>

0800046a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800046c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046e:	3304      	adds	r3, #4

08000470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000474:	d3f9      	bcc.n	800046a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000476:	4a0a      	ldr	r2, [pc, #40]	@ (80004a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000478:	4c0a      	ldr	r4, [pc, #40]	@ (80004a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800047c:	e001      	b.n	8000482 <LoopFillZerobss>

0800047e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000480:	3204      	adds	r2, #4

08000482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000484:	d3fb      	bcc.n	800047e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000486:	f000 f825 	bl	80004d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800048a:	f7ff febd 	bl	8000208 <main>
  bx  lr    
 800048e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000490:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000498:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800049c:	0800053c 	.word	0x0800053c
  ldr r2, =_sbss
 80004a0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004a4:	20000024 	.word	0x20000024

080004a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004a8:	e7fe      	b.n	80004a8 <ADC_IRQHandler>
	...

080004ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004b0:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <HAL_IncTick+0x20>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	461a      	mov	r2, r3
 80004b6:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <HAL_IncTick+0x24>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4413      	add	r3, r2
 80004bc:	4a04      	ldr	r2, [pc, #16]	@ (80004d0 <HAL_IncTick+0x24>)
 80004be:	6013      	str	r3, [r2, #0]
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	20000000 	.word	0x20000000
 80004d0:	20000020 	.word	0x20000020

080004d4 <__libc_init_array>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	4d0d      	ldr	r5, [pc, #52]	@ (800050c <__libc_init_array+0x38>)
 80004d8:	4c0d      	ldr	r4, [pc, #52]	@ (8000510 <__libc_init_array+0x3c>)
 80004da:	1b64      	subs	r4, r4, r5
 80004dc:	10a4      	asrs	r4, r4, #2
 80004de:	2600      	movs	r6, #0
 80004e0:	42a6      	cmp	r6, r4
 80004e2:	d109      	bne.n	80004f8 <__libc_init_array+0x24>
 80004e4:	4d0b      	ldr	r5, [pc, #44]	@ (8000514 <__libc_init_array+0x40>)
 80004e6:	4c0c      	ldr	r4, [pc, #48]	@ (8000518 <__libc_init_array+0x44>)
 80004e8:	f000 f818 	bl	800051c <_init>
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	10a4      	asrs	r4, r4, #2
 80004f0:	2600      	movs	r6, #0
 80004f2:	42a6      	cmp	r6, r4
 80004f4:	d105      	bne.n	8000502 <__libc_init_array+0x2e>
 80004f6:	bd70      	pop	{r4, r5, r6, pc}
 80004f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004fc:	4798      	blx	r3
 80004fe:	3601      	adds	r6, #1
 8000500:	e7ee      	b.n	80004e0 <__libc_init_array+0xc>
 8000502:	f855 3b04 	ldr.w	r3, [r5], #4
 8000506:	4798      	blx	r3
 8000508:	3601      	adds	r6, #1
 800050a:	e7f2      	b.n	80004f2 <__libc_init_array+0x1e>
 800050c:	08000534 	.word	0x08000534
 8000510:	08000534 	.word	0x08000534
 8000514:	08000534 	.word	0x08000534
 8000518:	08000538 	.word	0x08000538

0800051c <_init>:
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051e:	bf00      	nop
 8000520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000522:	bc08      	pop	{r3}
 8000524:	469e      	mov	lr, r3
 8000526:	4770      	bx	lr

08000528 <_fini>:
 8000528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052a:	bf00      	nop
 800052c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052e:	bc08      	pop	{r3}
 8000530:	469e      	mov	lr, r3
 8000532:	4770      	bx	lr
